Process for creating new scenes:
  1. In IDE, create new javafx file
  2. The ide will then highlight a controller variable and ask if it should make the controller
  3. rename/refactor the controller name (it will probably not say "Controller"
  4. Open the fxml file in scenebuilder and profit!

In order to control size of scene in scenebuilder, do *not* specify the size in the controller file.

To move Main:
- Don't move Main!
- Commit to version control
- change the name of the package main is in
- make a new package
- move those other files to the new package
- if there is a problem, revert to that previous commit.  Try again.
Moving main doesn't seem to work, so that is my workaround.

To use a button to switch to a new scene:
# The short version is just copy one of my other methods, altering the param to "getResource" to match the name of the fxml file
- Make sure that the widget (button) has both an fxid and a field in the controller
- Write the method in the controller, (I've been using a MouseEvent as a parameter)
-- This method throws an IOException
-- instantiates a Parent with the name of the fxml file that will be opened (the fxml file of the new scene)
-- Instantiates a Scene taking the Parent as a parameter
-- ackk, I don't fully understand some of the commands necessary, so just copy them.  LOL.
--- they involve Stage, Node, either one or two casts with some weird nesting.  ??

To add a project to Github: (apparently intellij can't just make this happen even if given github creds)
- create the new project on github via your web browser
-- I think that you should avoid clicking the "add readme" button b/c that can cause initial push conflicts.  Could be wrong.
- git remote add origin <PASTE GITHUB URL>    (At the command prompt within the relevant dir)
-- I had to use the -f option (possibly d/t the presence of the readme mentioned above, note that this is dangerous
   if  the project is already established [you could overwrite an existing project])

Intellij Shortcuts:
- ctrl+shft+Enter  Finishes line, meaning it will add all the right closing parentheses and semicolons.


**********this was removed from Main after a video with Malcom Wabara.  Important info here!  ***********************

        DBQuery.setStatement(conn);  //create statement Object
        Statement statement = DBQuery.getStatement();

        // raw sql insert statement
        //String insertStatement = "INSERT INTO country(country, createDate, createdBy, lastUpdateBy) Values('US', '2020-02-22 00:00:00', 'admin', 'admin')";
        /*
        // Variable Insert
        String countryName = "Canada";
        String createDate = "2020-02-22 00:00:00";
        String createdBy = "admin";
        String lastUpdateBy = "admin";

        String insertStatement = "INSERT INTO country(country, createDate, createdBy, lastUpdateBy)" +
                "Values(" +
                "'" + countryName + "'," +
                "'" + createDate + "'," +
                "'" + createdBy + "'," +
                "'" + lastUpdateBy + "'" +
                ")";

         */

        // Update statement
        //String updateStatement = "UPDATE country SET country = 'Japan' WHERE country = 'Canada'";

        // Delete statement
        String deleteStatement = "DELETE FROM country WHERE country = 'Japan'";

        // Execute SQL statement
        statement.execute(deleteStatement);  //this param changed from insertStatement to updateStatement

        //confirm rows effected
        if(statement.getUpdateCount() > 0)
            System.out.println( statement.getUpdateCount()+ " rows(s) affected");
        else
            System.out.println("No Changes!");




**********main() after jdbcIII.  Notice that a lot of stuff has been commented out, because MW had us disable
code as we made progress.  I think that JDBCIII might not be that helpful in the project d/t the fact that it uses the
"bad old way" of doing things, namely "Statement" as opposed to "PreparedStatement".  Not sure though.